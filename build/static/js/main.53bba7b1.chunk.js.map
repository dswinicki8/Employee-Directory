{"version":3,"sources":["components/searchForm.js","components/employee.js","utils/API.js","components/searchEmployee.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","value","search","onChange","handleInputChange","name","list","type","placeholder","id","onClick","handleFormSubmit","Employee","scope","alt","src","picture","firstName","lastName","phone","email","axios","get","SearchEmployee","state","result","filter","filterBy","currentSort","sortField","filterEmployees","searchkey","console","log","filterResult","person","setState","event","preventDefault","target","API","then","res","data","results","map","e","i","first","last","large","dob","age","key","catch","err","this","item","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gTA4BeA,MAxBf,SAAoBC,GAClB,OACE,0BAAMC,UAAU,UACd,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,aAAf,wBACA,2BACEC,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,kBAChBC,KAAK,SACLC,KAAK,SACLC,KAAK,OACLR,UAAU,eACVS,YAAY,mBACZC,GAAG,WAGL,4BAAQF,KAAK,SAASG,QAASZ,EAAMa,iBAAkBZ,UAAU,mBAAjE,aCCOa,MAnBf,SAAkBd,GAChB,OACE,6BACE,4BACE,wBAAIe,MAAM,OAAV,IAAiB,yBAAKC,IAAKhB,EAAMO,KAAMU,IAAKjB,EAAMkB,WAEpD,4BAAMlB,EAAMmB,WAEZ,4BAAMnB,EAAMoB,UAEZ,4BAAMpB,EAAMqB,OAEZ,4BAAMrB,EAAMsB,U,iBCTH,EACL,WACN,OAAOC,IAAMC,IAJL,kDCyHGC,E,4MApHbC,MAAQ,CACNC,OAAQ,GACRC,OAAQ,GACRC,SAAU,WACVC,YAAa,UACbC,UAAW,I,EAuBbC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,EAAKT,MAAMC,QAEvB,IAAIS,EAAe,EAAKV,MAAMC,OAAOC,QACnC,SAACS,GAAD,OAAYA,EAAOlB,YAAcc,KAGnC,EAAKK,SAAS,CACZX,OAAQS,K,EAKZvB,iBAAmB,SAAC0B,GAClBA,EAAMC,iBACN,IAAMrC,EAAQoC,EAAME,OAAOtC,MACrBI,EAAOgC,EAAME,OAAOlC,KAE1B2B,QAAQC,IAAIhC,EAAOI,GAEnB,EAAKyB,gBAAgB7B,GACrB,EAAKmC,SAAL,eACG/B,EAAOJ,IAEV,EAAK6B,gBAAgB7B,GACrB,EAAK6B,gBAAgB,EAAKN,MAAMtB,S,EAKlCE,kBAAoB,SAACiC,GACnBA,EAAMC,iBACNN,QAAQC,IAAII,GACZ,IAAMpC,EAAQoC,EAAME,OAAOtC,MACrBI,EAAOgC,EAAME,OAAOlC,KAE1B2B,QAAQC,IAAIhC,EAAOI,GAEnB,EAAK+B,SAAL,eACG/B,EAAOJ,K,kEA3DS,IAAD,OAClBuC,IACGC,MAAK,SAACC,GACLV,QAAQC,IAAIS,GACZ,EAAKN,SAAS,CACZX,OAAQiB,EAAIC,KAAKC,QAAQC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CACtC9B,UAAW6B,EAAEzC,KAAK2C,MAClB9B,SAAU4B,EAAEzC,KAAK4C,KACjBjC,QAAS8B,EAAE9B,QAAQkC,MACnB9B,MAAO0B,EAAE1B,MACTD,MAAO2B,EAAE3B,MACTgC,IAAKL,EAAEM,IACPC,IAAKN,WAIVO,OAAM,SAACC,GAAD,OAASvB,QAAQC,IAAIsB,Q,+BAgD9B,OACE,yBAAKxD,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,oDAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACEE,MAAOuD,KAAKhC,MAAMtB,OAClBE,kBAAmBoD,KAAKpD,kBACxBO,iBAAkB6C,KAAK7C,qBAK7B,yBAAKZ,UAAU,OACb,2BAAOA,UAAU,SACf,4BACE,wBAAIc,MAAM,OAAV,SACA,0CACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UAGD,YAAI2C,KAAKhC,MAAMC,QAAQoB,KAAI,SAACY,GAAD,OAC1B,kBAAC,EAAD,CACEzC,QAASyC,EAAKzC,QACdC,UAAWwC,EAAKxC,UAChBC,SAAUuC,EAAKvC,SACfE,MAAOqC,EAAKrC,MACZD,MAAOsC,EAAKtC,MACZkC,IAAKI,EAAKJ,gB,GA5GGK,a,MCSdC,MAXf,WACE,OACE,6BAGG,kBAAC,EAAD,QCEaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.53bba7b1.chunk.js","sourcesContent":["import React from \"react\";\n\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"employees\">Search Employees By:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"search\"\n          list=\"breeds\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search Employees\"\n          id=\"search\"\n        />\n        \n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from 'react'\n\nfunction Employee(props) {\n  return (\n    <div>\n      <tr>\n        <th scope=\"row\"> <img alt={props.name} src={props.picture}/></th>\n    \n      <td >{props.firstName}</td>\n      \n      <td >{props.lastName}</td>\n      \n      <td >{props.phone}</td>\n      \n      <td >{props.email}</td>\n      </tr>\n    </div>\n  )\n};\n\n\nexport default Employee;","import axios from 'axios';\n\n\nconst URL = \"https://randomuser.me/api/?results=100&nat=us\";\n\nexport default {\n  search: () =>{\n    return axios.get(URL);\n  }\n};","import React, {Component} from \"react\";\nimport SearchForm from \"./searchForm\";\nimport Employee from \"./employee\";\nimport API from \"../utils/API\";\n\n\n\nclass SearchEmployee extends Component {\n  state = {\n    result: [],\n    filter: \"\",\n    filterBy: \"lastName\",\n    currentSort: \"default\",\n    sortField: \"\",\n  };\n\n  //When components mounts, API call is envoked//\n  componentDidMount() {\n    API.search()\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          result: res.data.results.map((e, i) => ({\n            firstName: e.name.first,\n            lastName: e.name.last,\n            picture: e.picture.large,\n            email: e.email,\n            phone: e.phone,\n            dob: e.age,\n            key: i,\n          })),\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  filterEmployees = (searchkey) => {\n    console.log(searchkey);\n    console.log(this.state.result);\n\n    var filterResult = this.state.result.filter(\n      (person) => person.firstName === searchkey\n    );\n\n    this.setState({\n      result: filterResult,\n    });\n  };\n\n  //Form submit///\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const value = event.target.value;\n    const name = event.target.name;\n\n    console.log(value, name);\n\n    this.filterEmployees(value);\n    this.setState({\n      [name]: value,\n    });\n    this.filterEmployees(value);\n    this.filterEmployees(this.state.search);\n  };\n\n\n///form input change///\n  handleInputChange = (event) => {\n    event.preventDefault();\n    console.log(event);\n    const value = event.target.value;\n    const name = event.target.name;\n\n    console.log(value, name);\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h2>Employee Directory</h2>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <SearchForm\n              value={this.state.search}\n              handleInputChange={this.handleInputChange}\n              handleFormSubmit={this.handleFormSubmit}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <table className=\"table\">\n            <tr>\n              <th scope=\"col\">Photo</th>\n              <th>First Name</th>\n              <th scope=\"col\">Last Name </th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Phone</th>\n            </tr>\n\n            {[...this.state.result].map((item) => (\n              <Employee\n                picture={item.picture}\n                firstName={item.firstName}\n                lastName={item.lastName}\n                email={item.email}\n                phone={item.phone}\n                key={item.key}\n              />\n            ))}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\nexport default SearchEmployee;\n","import React from \"react\";\n\nimport SearchEmployee from './components/searchEmployee';\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      \n\n       <SearchEmployee/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}